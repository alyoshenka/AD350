1)
The way this database is set up, there can only be one phone number per vendor because there is only one column in the vendors table. A good way to fix this is to add a new table called PhoneNumber with 3 columns: phoneid, vendorid, phonenumber. The phoneid is the primary key and the phonenumber is the same varchar as from the vendors table. The vendorid is a foreign key that references the vendorid from the Vendor table. When the Vendor's phone number is needed, the two tables can be joined on this key. There should be a many to one relationship here, meaning that many phone numbers can reference one vendorid. This removes the "one phone number" restraint from the original table.

2)
This problem can be solved in a very similar way. A purchase is not comprised of just one product, but actually of many products. Create a new table called PurchaseTxItem that contains necessary data for which product is being purchased, its price, and the quantity. This table should also include a foreign key that references the ptxid of the PurchaseTx table. There should be a many-to-one relationship because many items can be in one transaction. A PurchaseTx represents the entire transaction and each PurchaseTxItem represents an individual item that is purchased. 